:root {
  /* Wird während der Layoutphase zum Kennzeichnen der Container benutzt */
  --layout-border: thin dotted darkgrey;

  /* Anwendungsweite Variablen */
  --app-spacing: 1rem;
  --app-transition: 0.2s ease-in-out;
  --background-color: white;
}

/* Klassenlose HTML Struktur */
/*
<body>
  <header>War Klasse main-head</header>
  <nav>War Klasse main-nav</nav>
  <main>War Klasse content</main>
  <aside>War Klasse side</aside>
  <footer>War Klasse main-footer</footer
</body>
*/

body {
  margin: 0;
  display: grid;
  grid-template-areas:
    "sidebar header"
    "sidebar content"
    "footer footer";

  grid-template-rows: minmax(auto, 2rem) auto;

  header {
    grid-area: header;
  }

  main {
    grid-area: content;
  }

  aside {
    grid-area: sidebar;
  }

  footer {
    grid-area: footer;
  }
}


header {
  display: flex;
  flex-flow: row nowrap;
  justify-content: space-between;
  align-items: center;

  form {
    display: flex;
  }

  :nth-child(2) {
    /* min-width: fit-content; */
  }
}

.fill {
  flex-grow: 1;
}

nav {
  a {
    text-decoration: none;
  }

  ul,
  menu {
    padding: 0;
    margin: 0;
  }
}

header nav {

  border: var(--layout-border);
  display: inline-block;

  ul,
  menu {
    position: relative;
    display: flex;
    flex-direction: row;
    list-style-type: none;

    li {
      padding: 0 1rem;

      a {
        text-decoration: none;
      }

      ul,
      menu {
        background-color: var(--background-color);
        visibility: hidden;
        opacity: 0;
        position: absolute;
        display: block;
      }

      &:hover {

        ul,
        menu {
          visibility: visible;
          opacity: 1;
        }
      }
    }
  }
}

div,
aside,
main,
nav,
header,
footer {
  border: var(--layout-border);
  border-radius: 5px;
}


/* In <main>:
     <article>: Detailansicht, wie in GNOME Einstellungen
     <div>: Listen, Kacheln, wie in GNOME Dateien
*/

/* Detailansicht */

article {
  /* max-width: 640px; */
  /* text-align: center; */
}

dl,
dl div {
  border: var(--layout-border);

  display: grid;
  grid-template-columns: [term] max-content [description] 1fr;
  grid-auto-rows: auto;
  grid-auto-flow: dense;
  gap: 1px;

  /* div Element erstreckt sich über beide Spalten */
  div {
    grid-column: span 2;
  }

  /* Dem div Element folgt eine Trennlinie. Ist das div Element das letzte
  Kindelement, folgt keine Trennlinie*/
  div:not(:last-child) {
    border-bottom: 1px solid black;
  }

  dt {
    grid-column: term;
    justify-self: start;
  }

  /* Wenn die Beschreibung zwei Terms vorausgegangen sind, erstreckt sich die Beschreibung über zwei Zeilen */
  dt+dt+dd {
    grid-row: span 2;
  }

  dd {
    grid-column: description;
    justify-self: end;
    align-self: center;
    border: var(--layout-border);
  }

  /* Wenn einer Beschreibung zwei Terms folgen, erstreckt sich die Beschreibung über zwei Zeilen */
  dt:has(+ dd + dd) {
    grid-row: span 2;
    align-self: center;
  }
}

details.dropdown {
  position: relative;

  summary~* {
    display: flex;
    flex-direction: column;
    position: absolute;
    right: 0;
    width: 100%;

    min-width: fit-content;
    margin: 0;
    padding: 0;
    border: var(--layout-border);
    z-index: 99;
    opacity: 1;
    background-color: var(--background-color)
  }
}

fieldset {
  margin: 0;
  padding: 0;
  border: none;
  display: flex;
  flex-direction: column;
}



details {
  display: block;
}

details summary {
  cursor: pointer;
  line-height: 1rem;
  list-style-type: none;
}

details summary::after {
  display: block;
  width: 1rem;
  height: 1rem;
  margin-inline-start: calc(var(--app-spacing, 1rem) * 0.5);
  float: right;
  content: ">";
  transition: transform var(--app-transition)
}

details[open] summary::after {
  transform: rotate(90deg);
}

/* TODO:
Mir bislang unbekannte HTML Elemente:
  menu - Semantisch besser als ul für Menüs.
  hgroup
  output
  search
  slot (Web Component Slot)
  template
  time

Formulare
  Um Formulare wie in GNOME darzustellen, könnte ich fieldsets verwenden
  Ich kann mir das id Attribut für label sparen, wenn das input Element
  ein Kindelement des Labels ist. Labels sind nur für button, input,
  meter, output, progress, select und textare zu gebrauchen.

Um Detailansichten (ähnlich Formulare) zu gestalten könnte ich dl benutzen
Für Akkordeon das details element
*/
