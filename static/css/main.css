@layer reset, defaults, application;

@layer reset {

  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  * {
    margin: 0;
  }

  body {
    /* font-family: Arial, Helvetica, sans-serif; */
    font-family: system-ui, sans-serif;
    margin: 0;
    background-color: var(--background);
    color: var(--text);
    font-size: 1rem;
  }

  html {
    color-scheme: light dark;
    line-height: 1.6;
    /* Ob ich das brauche? */
  }

  img {
    max-width: 100%;
    display: block;
  }

  input,
  button,
  textarea,
  select {
    font-family: inherit;
    font-size: inherit;
  }
}

@layer general-styling {
  /* html {
    line-height: 1.6;
  } */

  /* body {
    margin: 0;
    background-color: var(--clr-surface-1);
    color: white;
    min-height: 100dvh;

    font-size: 1rem;
  } */

  /* h1,
  h2,
  h3,
  h4,
  p,
  figure,
  blockquote,
  dl,
  dd {
    margin-block-end: 0;
  } */

  /* h1,
  h2,
  h3,
  h4 {
    text-wrap: balance;
  } */

  /* h1,
  h2,
  h3,
  h4,
  button,
  input,
  label {
    line-height: 1.1;
  } */

  /* h1 {
    font-size: 1rem;
    text-align: center;
    margin-block-start: 2rem;
  } */

  /* img,
  picture {
    max-width: 100%;
    display: block;
  } */

  /* input,
  button,
  textarea,
  select {
    font-family: inherit;
    font-size: inherit;
  } */

  /* :is(button, .button) {
    display: inline-flex;
    cursor: pointer;
    text-decoration: none;
    padding: 1rem 2rem;
    font-weight: 500;
    background-color: var(--btn-surface, var(--btn-default-surface));
    color: white;
    border: 0;
    border-radius: 1rem;
    transition: scale 0.125s;
  } */

  /* :is(button, .button):is(:hover, :focus-visible) {
    background-color: var(--btn-surface-hover,
        var(--btn-default-surface-hover));
  } */

  :is(button, .button):active {
    scale: 0.95;
  }

  html {
    /* font-size: 2rem; */
  }

  nav {
    /* max-inline-size: 900px;
    margin: var(--size-900) auto; */
    /* background-color: var(--clr-surface-3); */
    /* border-radius: 1rem;
    margin: 3rem;
    padding: 1rem 2rem; */
  }

  ul {
    /* list-style: none; */
    /* margin: 0; */

    /* padding-inline: 0; */

    /* display: flex; */
    /* align-items: center; */
    /* justify-content: center; */
  }

  /* .user-button {
    border: 6px solid var(--clr-surface-3);

    &:hover,
    &:focus-visible {
      outline: 0;
      border-color: hsl(from var(--clr-surface-2) h s 45%);
    }
  } */

  /* .profile-image {
    aspect-ratio: 1;
    border-radius: 100%;
    width: 75px;
    aspect-ratio: 1;
    object-fit: cover;
  } */

  /* .profile {
    display: grid;
    gap: 0.25rem;
  } */

  .profile-menu {
    /* general styling for the dialog */
    /* border: 0;
    padding: 0;
    border-radius: 0.25rem;
    background: hsl(197, 87%, 39%);
    color: white;
    font-size: 0.5rem;
    overflow: hidden; */
  }

  .profile-menu button {
    /* padding: var(--size-300);
    border-top: 1px solid var(--clr-surface--1);
    border-radius: 0;
    background-color: hsl(197, 87%, 39%); */
  }
}

@layer defaults {
  @media (prefers-color-scheme: light) {
    :root {
      --text: #333333;
      --background: #fafafa;
      --primary: #176dc2;
      --secondary: #b5a0d4;
      --accent: #c27aa5;
    }
  }

  @media (prefers-color-scheme: dark) {
    :root {
      --text: #cccccc;
      --background: #050505;
      --primary: #3b91e8;
      --secondary: #402b5f;
      --accent: #853d68;
    }
  }
}

@layer application {}

:root {
  /* Wird während der Layoutphase zum Kennzeichnen der Container benutzt */
  --layout-border: thin dotted darkgrey;

  /* Anwendungsweite Variablen */
  --app-spacing: 1rem;
  --app-transition: 0.2s ease-in-out;
  --background-color: white;
}



/* Reset */

/* Typography */

figcaption,
caption {
  text-align: left;
  margin-bottom: 0.5rem;
  font-weight: bold;
}

/* Vertikale Abstände */
main article,
main section,
main table,
main form,
main div,
main figure {
  margin-bottom: 1rem;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  margin-bottom: 0.5rem;
}

p,
pre {
  margin-bottom: 0.5rem;
}

p {
  text-wrap: pretty;
}

/* Beginn Popover + Anchor Positioning
https: //www.youtube.com/watch?v=DNXEORSk4GU*/

.application-menu {
  inset: auto;
  transform: translateX(-50%);

  &:popover-open {
    display: grid;
    opacity: 1;
  }
}




/* End Popover + Anchor Positioning */

/* Klassenlose HTML Struktur - globales Layout */
/*
<body>
  <header></header>
  <aside></aside>
  <nav></nav>
  <main></main>
  <footer></footer
</body>
*/

body {
  display: grid;
  grid-template-areas:
    "sidebar header"
    "sidebar content"
    "footer footer";

  /* Sidebar nimmt sich soviel Platz, wie sie benötigt; Der Inhaltsbereich wächst mit der Fenstergröße.*/
  grid-template-columns: auto 1fr;

  header {
    grid-area: header;
  }

  main {
    grid-area: content;
  }

  aside {
    grid-area: sidebar;

  }

  footer {
    grid-area: footer;
  }
}

/* Das könnte später mal main sein. */
/* Rekursives full-width ist nicht implementiert. */
.content-grid {
  --padding-inline: 2rem;
  --content-max-midth: 70ch;
  --breakout-max-width: 95ch;

  --breakout-size: calc((var(--breakout-max-width) - var(--content-max-midth)) / 2);

  display: grid;
  grid-template-columns:
    [full-width-start] minmax(var(--padding-inline), 1fr) [breakout-start] minmax(0, var(--breakout-size)) [content-start] min(100% - (var(--padding-inline) * 2), var(--content-max-midth)) [content-end] minmax(0, var(--breakout-size)) [breakout-end] minmax(var(--padding-inline), 1fr) [full-width-end];
}

.content-grid>* {
  grid-column: content;
}

.content-grid>.breakout {
  grid-column: breakout;
}

.content-grid>.full-width {
  grid-column: full-width;
}

header {
  margin: 0 0.25rem;

  display: flex;
  flex-flow: row nowrap;
  justify-content: space-between;
  align-items: baseline;

  form {
    display: flex;
  }

  >*:not(:first-child) {
    margin-left: 0.5rem;
  }

  >*:not(:last-child) {
    margin-right: 0.5rem;
  }
}

.fill {
  flex-grow: 1;
}

nav {
  a {
    text-decoration: none;
  }

  ul,
  menu {
    padding: 0;
    margin: 0;
  }
}

header nav {

  border: var(--layout-border);
  display: inline-block;

  ul,
  menu {
    position: relative;
    display: flex;
    list-style-type: none;

    li {

      a {
        text-decoration: none;
      }

      ul,
      menu {
        background-color: var(--background-color);
        visibility: hidden;
        opacity: 0;
        position: absolute;
        display: block;
      }

      &:hover {

        ul,
        menu {
          visibility: visible;
          opacity: 1;
        }
      }
    }
  }
}

aside,
main,
nav,
header,
footer {
  outline: var(--layout-border);
}

/* Von der Breite beschränkte und zentrierte Elemente des Hauptbereichs */

main>form {
  max-width: 570px;
  margin: auto;
}

main>table {
  /* max-width: 570px; */
  margin: auto;
}


/* Kartenansicht */

/* Detailansicht */
/* Da muss ein anderer Selektor hin. Darf sich aber nicht mit Karten und Listenansicht überschneiden */
main section {
  figure {
    width: fit-content;
    margin: inherit auto;

    img {
      display: block;
    }
  }
}

dl,
dl div {
  border: var(--layout-border);

  display: grid;
  grid-template-columns: [term] max-content [description] 1fr;
  grid-auto-rows: auto;
  grid-auto-flow: dense;
  gap: 1px;

  /* div Element erstreckt sich über beide Spalten */
  div {
    grid-column: span 2;
  }

  /* Dem div Element folgt eine Trennlinie. Ist das div Element das letzte
  Kindelement, folgt keine Trennlinie*/
  div:not(:last-child) {
    border-bottom: 1px solid black;
  }

  dt {
    grid-column: term;
    justify-self: start;
  }

  /* Wenn die Beschreibung zwei Terms vorausgegangen sind, erstreckt sich die Beschreibung über zwei Zeilen */
  dt+dt+dd {
    grid-row: span 2;
  }

  dd {
    grid-column: description;
    justify-self: end;
    align-self: center;
    border: var(--layout-border);
  }

  /* Wenn einer Beschreibung zwei Terms folgen, erstreckt sich die Beschreibung über zwei Zeilen */
  dt:has(+ dd + dd) {
    grid-row: span 2;
    align-self: center;
  }
}

details.dropdown {
  position: relative;

  summary~* {
    display: flex;
    flex-direction: column;
    position: absolute;
    right: 0;
    width: 100%;

    min-width: fit-content;
    margin: 0;
    padding: 0;
    border: var(--layout-border);
    z-index: 99;
    opacity: 1;
    background-color: var(--background-color)
  }
}

fieldset {
  margin: 0;
  padding: 0;
  border: none;
  display: flex;
  flex-direction: column;
}

details {
  display: block;
}

details summary {
  cursor: pointer;
  line-height: 1rem;
  list-style-type: none;
}

details summary::after {
  display: block;
  width: 1rem;
  height: 1rem;
  margin-inline-start: calc(var(--app-spacing, 1rem) * 0.5);
  float: right;
  content: ">";
  transition: transform var(--app-transition)
}

details[open] summary::after {
  transform: rotate(90deg);
}

/* Cards */


/* Kartenansicht Layout*/
main>ul {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  grid-auto-rows: minmax(300px, auto);
  justify-items: center;
  justify-content: center;
  gap: 1rem;
  padding: 1rem;

  >li {
    /* Karten müssen eine feste Breite besitzen.*/
    /* Todo: Breite der Karten als Variable */
    width: 300px;
    position: relative;
    outline: var(--layout-border);

    a {
      text-decoration: none;
    }

    /* Der Trick, dass Karten anklickbar sind */
    a::after {
      position: absolute;
      inset-block: 0;
      inset-inline: 0;
      cursor: pointer;
      content: "";
    }
  }
}

/* Effekte */
/* Bei Karten mit Fokus oder Hover das enthaltene Bild heranzoomen und einen Schatten erzeugen */
main>ul {


  >li {
    --image-scale: 1.001;
    overflow: hidden;
    transform-origin: center;
    background-color: var(--background-color);
    margin: 0;


    img {
      transform-origin: center;
      transform: scale(var(--img-scale));
      transition: transform 0.4s ease-in-out;
    }

    div {
      padding: 0.5rem;
    }

    /* Links mit Fokus durch einen Rahmen hervorheben */
    a:focus {
      outline: 1px dotted #28666e;
    }
  }

  /* Aktive Karten hervorheben */
  >li:has(:hover, :focus) {
    --img-scale: 1.1;
    box-shadow: rgba(0, 0, 0, 0.16) 0px 10px 36px 0px, rgba(0, 0, 0, 0.06) 0px 0px 0px 1px;
  }
}

/* Listenansicht: Listenansichten sind table Elemente in main */
main table {

  width: 100%;
  min-width: 100%;
  border-collapse: separate;
  border-spacing: 0;

  th,
  td {
    border: var(--layout-border);
    text-align: left;
    overflow-wrap: break-word;
    white-space: normal;

  }
}

/* TODO:
Mir bislang unbekannte HTML Elemente:
  menu - Semantisch besser als ul für Menüs.
  hgroup
  output
  search
  slot (Web Component Slot)
  template
  time

Formulare
  Um Formulare wie in GNOME darzustellen, könnte ich fieldsets verwenden
  Ich kann mir das id Attribut für label sparen, wenn das input Element
  ein Kindelement des Labels ist. Labels sind nur für button, input,
  meter, output, progress, select und textare zu gebrauchen.

Um Detailansichten (ähnlich Formulare) zu gestalten könnte ich dl benutzen
Für Akkordeon das details element
*/
